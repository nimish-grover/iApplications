"""Initial Migrations

Revision ID: 2ebf3ac07dbc
Revises: 
Create Date: 2023-12-10 14:40:53.867428

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2ebf3ac07dbc'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('livestocks',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('livestocks_id_seq'::regclass)"), nullable=False),
    sa.Column('type', sa.String(length=20), nullable=True),
    sa.Column('bird_type', sa.String(length=30), nullable=True),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('water_use', sa.Float(precision=53), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('states',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('states_id_seq'::regclass)"), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=True),
    sa.Column('code', sa.Integer(), nullable=False),
    sa.Column('census_code', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('districts',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('districts_id_seq'::regclass)"), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('code', sa.Integer(), nullable=False),
    sa.Column('census_code', sa.Integer(), nullable=True),
    sa.Column('state_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['state_id'], ['states.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('blocks',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('blocks_id_seq'::regclass)"), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=True),
    sa.Column('code', sa.Integer(), nullable=False),
    sa.Column('census_code', sa.Integer(), nullable=True),
    sa.Column('district_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['district_id'], ['districts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rainfall_data',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('rainfall_data_id_seq'::regclass)"), nullable=False),
    sa.Column('observation_date', sa.DateTime(), nullable=True),
    sa.Column('normal', sa.Float(precision=53), nullable=False),
    sa.Column('actual', sa.Float(precision=53), nullable=False),
    sa.Column('district_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['district_id'], ['districts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('villages',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('villages_id_seq'::regclass)"), nullable=False),
    sa.Column('name', sa.String(length=160), nullable=False),
    sa.Column('code', sa.Integer(), nullable=False),
    sa.Column('census_code', sa.Integer(), nullable=True),
    sa.Column('block_id', sa.Integer(), nullable=False),
    sa.Column('district_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.id'], ),
    sa.ForeignKeyConstraint(['district_id'], ['districts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('block_id', 'district_id', 'code')
    )
    op.create_table('census_data',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('census_data_id_seq'::regclass)"), nullable=False),
    sa.Column('total_geographical_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('households', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('male_population', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('female_population', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('sc_population', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('st_population', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('forest_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('non_agricultural_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('uncultivable_land_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('grazing_land_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('misc_crops_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('wasteland_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('fallows_land_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('current_fallows_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('unirrigated_land_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('canals_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('tubewell_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('tank_lake_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('waterfall_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('other_sources_area', sa.Float(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('village_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['village_id'], ['villages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('livestock_census',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('livestock_census_id_seq'::regclass)"), nullable=False),
    sa.Column('livestock_number', sa.Integer(), nullable=True),
    sa.Column('livestock_id', sa.Integer(), nullable=False),
    sa.Column('village_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['livestock_id'], ['livestocks.id'], ),
    sa.ForeignKeyConstraint(['village_id'], ['villages.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('livestock_id', 'village_id')
    )
    op.create_table('waterbodies',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('waterbodies_id_seq'::regclass)"), nullable=False),
    sa.Column('waterbody_area', sa.Float(precision=53), nullable=False),
    sa.Column('village_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['village_id'], ['villages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('waterbodies')
    op.drop_table('livestock_census')
    op.drop_table('census_data')
    op.drop_table('villages')
    op.drop_table('rainfall_data')
    op.drop_table('blocks')
    op.drop_table('districts')
    op.drop_table('states')
    op.drop_table('livestocks')
    # ### end Alembic commands ###
