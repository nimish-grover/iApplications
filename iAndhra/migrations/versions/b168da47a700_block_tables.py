"""block tables\


Revision ID: b168da47a700
Revises: 07b853c5f9a6
Create Date: 2025-02-04 12:09:40.425179

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b168da47a700'
down_revision = '07b853c5f9a6'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('block_category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('block_transfer_sectors',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sector', sa.String(length=100), nullable=False),
    sa.Column('remarks', sa.String(length=200), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sector')
    )
    op.create_table('block_transfer_types',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('transfer_type', sa.String(length=100), nullable=False),
    sa.Column('remarks', sa.String(length=200), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transfer_type')
    )
    op.create_table('block_territory',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('state_id', sa.Integer(), nullable=False),
    sa.Column('district_id', sa.Integer(), nullable=False),
    sa.Column('block_id', sa.Integer(), nullable=False),
    sa.Column('panchayat_id', sa.Integer(), nullable=True),
    sa.Column('village_id', sa.Integer(), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.id'], ),
    sa.ForeignKeyConstraint(['district_id'], ['districts.id'], ),
    sa.ForeignKeyConstraint(['panchayat_id'], ['panchayats.id'], ),
    sa.ForeignKeyConstraint(['state_id'], ['states.id'], ),
    sa.ForeignKeyConstraint(['village_id'], ['villages.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('block_id')
    )
    op.create_table('block_crops',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('crop_id', sa.Integer(), nullable=False),
    sa.Column('area', sa.Float(), nullable=False),
    sa.Column('bt_id', sa.Integer(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['bt_id'], ['block_territory.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['crop_id'], ['crops.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('block_groundwater',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('extraction', sa.Float(), nullable=False),
    sa.Column('bt_id', sa.Integer(), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['bt_id'], ['block_territory.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('block_industries',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('industry_id', sa.Integer(), nullable=False),
    sa.Column('unit', sa.String(length=20), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('allocation', sa.Float(), nullable=False),
    sa.Column('bt_id', sa.Integer(), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['bt_id'], ['block_territory.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['industry_id'], ['industries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('block_livestocks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('livestock_id', sa.Integer(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('bt_id', sa.Integer(), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['bt_id'], ['block_territory.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['livestock_id'], ['livestocks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('block_lulc',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('area', sa.Float(), nullable=False),
    sa.Column('bt_id', sa.Integer(), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('lulc_id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['bt_id'], ['block_territory.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['lulc_id'], ['lulc.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('block_pops',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('bt_id', sa.Integer(), nullable=False),
    sa.Column('population_id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['bt_id'], ['block_territory.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['population_id'], ['population.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('block_progress',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('bt_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('table_id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['bt_id'], ['block_territory.id'], ),
    sa.ForeignKeyConstraint(['category_id'], ['block_category.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('block_rainfall',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('normal', sa.Float(), nullable=False),
    sa.Column('actual', sa.Float(), nullable=False),
    sa.Column('month_year', sa.DateTime(), nullable=False),
    sa.Column('bt_id', sa.Integer(), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['bt_id'], ['block_territory.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('block_water_transfers',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('transfer_quantity', sa.Float(), nullable=False),
    sa.Column('transfer_type_id', sa.Integer(), nullable=False),
    sa.Column('transfer_sector_id', sa.Integer(), nullable=False),
    sa.Column('bt_id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=True),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['bt_id'], ['block_territory.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['transfer_sector_id'], ['block_transfer_sectors.id'], ),
    sa.ForeignKeyConstraint(['transfer_type_id'], ['block_transfer_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('block_waterbodies',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('area', sa.Float(), nullable=False),
    sa.Column('storage', sa.Float(), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('wb_type_id', sa.Integer(), nullable=False),
    sa.Column('bt_id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['bt_id'], ['block_territory.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['wb_type_id'], ['waterbody_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('block_waterbodies')
    op.drop_table('block_water_transfers')
    op.drop_table('block_rainfall')
    op.drop_table('block_progress')
    op.drop_table('block_pops')
    op.drop_table('block_lulc')
    op.drop_table('block_livestocks')
    op.drop_table('block_industries')
    op.drop_table('block_groundwater')
    op.drop_table('block_crops')
    op.drop_table('block_territory')
    op.drop_table('block_transfer_types')
    op.drop_table('block_transfer_sectors')
    op.drop_table('block_category')
    # ### end Alembic commands ###
