"""census tables

Revision ID: 07b853c5f9a6
Revises: 6c15cc8c5b1b
Create Date: 2025-02-04 12:08:28.911871

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '07b853c5f9a6'
down_revision = '6c15cc8c5b1b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('budget_entities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('source', sa.String(length=80), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rainfall_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('observation_date', sa.DateTime(), nullable=True),
    sa.Column('normal', sa.Float(precision=53), nullable=False),
    sa.Column('actual', sa.Float(precision=53), nullable=False),
    sa.Column('district_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['district_id'], ['districts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('crop_census',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('territory_id', sa.Integer(), nullable=False),
    sa.Column('village_lgd_code', sa.Integer(), nullable=False),
    sa.Column('crop_id', sa.Integer(), nullable=False),
    sa.Column('season', sa.String(length=50), nullable=False),
    sa.Column('crop_area', sa.Float(), nullable=False),
    sa.Column('production', sa.Float(), nullable=False),
    sa.Column('crop_yield', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['crop_id'], ['crops.id'], ),
    sa.ForeignKeyConstraint(['territory_id'], ['territory_joins.id'], ),
    sa.ForeignKeyConstraint(['village_lgd_code'], ['villages.lgd_code'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('groundwater_extractions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('stage_of_extraction', sa.Float(), nullable=False),
    sa.Column('rainfall', sa.Float(), nullable=False),
    sa.Column('recharge', sa.Float(), nullable=False),
    sa.Column('discharge', sa.Float(), nullable=False),
    sa.Column('extractable', sa.Float(), nullable=False),
    sa.Column('extraction', sa.Float(), nullable=False),
    sa.Column('category', sa.String(length=80), nullable=False),
    sa.Column('village_id', sa.Integer(), nullable=False),
    sa.Column('block_id', sa.Integer(), nullable=False),
    sa.Column('district_id', sa.Integer(), nullable=False),
    sa.Column('tj_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.id'], ),
    sa.ForeignKeyConstraint(['district_id'], ['districts.id'], ),
    sa.ForeignKeyConstraint(['tj_id'], ['territory_joins.id'], ),
    sa.ForeignKeyConstraint(['village_id'], ['villages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('livestock_census',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('livestock_id', sa.Integer(), nullable=True),
    sa.Column('livestock_count', sa.Integer(), nullable=False),
    sa.Column('village_code', sa.Integer(), nullable=False),
    sa.Column('block_code', sa.Integer(), nullable=False),
    sa.Column('district_code', sa.Integer(), nullable=False),
    sa.Column('tj_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['livestock_id'], ['livestocks.id'], ),
    sa.ForeignKeyConstraint(['tj_id'], ['territory_joins.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('lulc_census',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('lulc_id', sa.Integer(), nullable=False),
    sa.Column('lulc_area', sa.Float(), nullable=False),
    sa.Column('tj_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['lulc_id'], ['lulc.id'], ),
    sa.ForeignKeyConstraint(['tj_id'], ['territory_joins.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('population_census',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('population_id', sa.Integer(), nullable=False),
    sa.Column('population_count', sa.Integer(), nullable=False),
    sa.Column('territory_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['population_id'], ['population.id'], ),
    sa.ForeignKeyConstraint(['territory_id'], ['territory_joins.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('waterbodies_census',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('spread_area', sa.Float(), nullable=False),
    sa.Column('storage_capacity', sa.Float(), nullable=False),
    sa.Column('max_depth', sa.Float(), nullable=False),
    sa.Column('longitude', sa.String(length=80), nullable=True),
    sa.Column('latitude', sa.String(length=80), nullable=True),
    sa.Column('waterbody_id', sa.Integer(), nullable=False),
    sa.Column('village_code', sa.Integer(), nullable=False),
    sa.Column('district_code', sa.Integer(), nullable=False),
    sa.Column('tj_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['district_code'], ['districts.lgd_code'], ),
    sa.ForeignKeyConstraint(['tj_id'], ['territory_joins.id'], ),
    sa.ForeignKeyConstraint(['village_code'], ['villages.lgd_code'], ),
    sa.ForeignKeyConstraint(['waterbody_id'], ['waterbody_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('waterbodies_census')
    op.drop_table('population_census')
    op.drop_table('lulc_census')
    op.drop_table('livestock_census')
    op.drop_table('groundwater_extractions')
    op.drop_table('crop_census')
    op.drop_table('rainfall_data')
    op.drop_table('budget_entities')
    # ### end Alembic commands ###
