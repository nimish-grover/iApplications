"""initial_migration

Revision ID: 51f3c28c63c7
Revises: 
Create Date: 2024-12-03 23:56:50.581957

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '51f3c28c63c7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('crops',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('crop_name', sa.String(length=200), nullable=False),
    sa.Column('coefficient', sa.Float(), nullable=False),
    sa.Column('remarks', sa.String(length=300), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('crop_name')
    )
    op.create_table('livestocks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('livestock_name', sa.String(length=100), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('coefficient', sa.Float(), nullable=False),
    sa.Column('remarks', sa.String(length=300), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('livestock_name')
    )
    op.create_table('lulc',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lulc_name', sa.String(length=100), nullable=False),
    sa.Column('census_description', sa.String(length=100), nullable=False),
    sa.Column('display_name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('lulc_name')
    )
    op.create_table('population',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('population_type', sa.String(length=100), nullable=False),
    sa.Column('short_name', sa.String(length=100), nullable=False),
    sa.Column('display_name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('states',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lgd_code', sa.Integer(), nullable=True),
    sa.Column('state_name', sa.String(length=255), nullable=True),
    sa.Column('census_code', sa.Integer(), nullable=True),
    sa.Column('is_state', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('lgd_code')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=True),
    sa.Column('password', sa.String(length=300), nullable=True),
    sa.Column('isActive', sa.Boolean(), nullable=False),
    sa.Column('isAdmin', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('waterbody_types',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('waterbody_name', sa.String(length=80), nullable=False),
    sa.Column('description', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('districts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('state_lgd_code', sa.Integer(), nullable=False),
    sa.Column('lgd_code', sa.Integer(), nullable=False),
    sa.Column('district_name', sa.String(length=255), nullable=True),
    sa.Column('census_code', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['state_lgd_code'], ['states.lgd_code'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('lgd_code')
    )
    op.create_table('blocks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('state_lgd_code', sa.Integer(), nullable=False),
    sa.Column('district_lgd_code', sa.Integer(), nullable=False),
    sa.Column('lgd_code', sa.Integer(), nullable=False),
    sa.Column('block_name', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['district_lgd_code'], ['districts.lgd_code'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('lgd_code', 'district_lgd_code', name='blocks_unique_lgd_code_district_lgd_code')
    )
    op.create_table('rainfall_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('observation_date', sa.DateTime(), nullable=True),
    sa.Column('normal', sa.Float(precision=53), nullable=False),
    sa.Column('actual', sa.Float(precision=53), nullable=False),
    sa.Column('district_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['district_id'], ['districts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('villages',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('state_lgd_code', sa.Integer(), nullable=False),
    sa.Column('district_lgd_code', sa.Integer(), nullable=False),
    sa.Column('lgd_code', sa.Integer(), nullable=False),
    sa.Column('village_name', sa.String(length=255), nullable=True),
    sa.Column('census_code', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['district_lgd_code'], ['districts.lgd_code'], ),
    sa.ForeignKeyConstraint(['state_lgd_code'], ['states.lgd_code'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('lgd_code')
    )
    op.create_table('territory_joins',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('state_id', sa.Integer(), nullable=False),
    sa.Column('district_id', sa.Integer(), nullable=False),
    sa.Column('block_id', sa.Integer(), nullable=True),
    sa.Column('village_id', sa.Integer(), nullable=False),
    sa.Column('rec_status', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.id'], ),
    sa.ForeignKeyConstraint(['district_id'], ['districts.id'], ),
    sa.ForeignKeyConstraint(['state_id'], ['states.id'], ),
    sa.ForeignKeyConstraint(['village_id'], ['villages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('crop_census',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('territory_id', sa.Integer(), nullable=False),
    sa.Column('village_lgd_code', sa.Integer(), nullable=False),
    sa.Column('crop_id', sa.Integer(), nullable=False),
    sa.Column('season', sa.String(length=50), nullable=False),
    sa.Column('crop_area', sa.Float(), nullable=False),
    sa.Column('production', sa.Float(), nullable=False),
    sa.Column('crop_yield', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['crop_id'], ['crops.id'], ),
    sa.ForeignKeyConstraint(['territory_id'], ['territory_joins.id'], ),
    sa.ForeignKeyConstraint(['village_lgd_code'], ['villages.lgd_code'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('groundwater_extractions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('stage_of_extraction', sa.Float(), nullable=False),
    sa.Column('rainfall', sa.Float(), nullable=False),
    sa.Column('recharge', sa.Float(), nullable=False),
    sa.Column('discharge', sa.Float(), nullable=False),
    sa.Column('extractable', sa.Float(), nullable=False),
    sa.Column('extraction', sa.Float(), nullable=False),
    sa.Column('category', sa.String(length=80), nullable=False),
    sa.Column('block_id', sa.Integer(), nullable=False),
    sa.Column('district_id', sa.Integer(), nullable=False),
    sa.Column('tj_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.id'], ),
    sa.ForeignKeyConstraint(['district_id'], ['districts.id'], ),
    sa.ForeignKeyConstraint(['tj_id'], ['territory_joins.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('livestock_census',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('livestock_id', sa.Integer(), nullable=True),
    sa.Column('livestock_count', sa.Integer(), nullable=False),
    sa.Column('village_code', sa.Integer(), nullable=False),
    sa.Column('block_code', sa.Integer(), nullable=False),
    sa.Column('district_code', sa.Integer(), nullable=False),
    sa.Column('tj_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['livestock_id'], ['livestocks.id'], ),
    sa.ForeignKeyConstraint(['tj_id'], ['territory_joins.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('lulc_census',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('lulc_id', sa.Integer(), nullable=False),
    sa.Column('lulc_area', sa.Float(), nullable=False),
    sa.Column('tj_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['lulc_id'], ['lulc.id'], ),
    sa.ForeignKeyConstraint(['tj_id'], ['territory_joins.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('population_census',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('population_id', sa.Integer(), nullable=False),
    sa.Column('population_count', sa.Integer(), nullable=False),
    sa.Column('territory_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['population_id'], ['population.id'], ),
    sa.ForeignKeyConstraint(['territory_id'], ['territory_joins.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('waterbodies_census',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('spread_area', sa.Float(), nullable=False),
    sa.Column('storage_capacity', sa.Float(), nullable=False),
    sa.Column('max_depth', sa.Float(), nullable=False),
    sa.Column('longitude', sa.String(length=80), nullable=True),
    sa.Column('latitude', sa.String(length=80), nullable=True),
    sa.Column('waterbody_id', sa.Integer(), nullable=False),
    sa.Column('village_code', sa.Integer(), nullable=False),
    sa.Column('district_code', sa.Integer(), nullable=False),
    sa.Column('tj_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['district_code'], ['districts.lgd_code'], ),
    sa.ForeignKeyConstraint(['tj_id'], ['territory_joins.id'], ),
    sa.ForeignKeyConstraint(['village_code'], ['villages.lgd_code'], ),
    sa.ForeignKeyConstraint(['waterbody_id'], ['waterbody_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('waterbodies_census')
    op.drop_table('population_census')
    op.drop_table('lulc_census')
    op.drop_table('livestock_census')
    op.drop_table('groundwater_extractions')
    op.drop_table('crop_census')
    op.drop_table('territory_joins')
    op.drop_table('villages')
    op.drop_table('rainfall_data')
    op.drop_table('blocks')
    op.drop_table('districts')
    op.drop_table('waterbody_types')
    op.drop_table('users')
    op.drop_table('states')
    op.drop_table('population')
    op.drop_table('lulc')
    op.drop_table('livestocks')
    op.drop_table('crops')
    # ### end Alembic commands ###
